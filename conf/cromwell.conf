# We start with a full application config from cromwell directly
# Then override any parameters we are interested in.
include required(classpath("application"))

# Backends are processing engines for managing workflows. There
# are a few built-in and others than can be created separately. 
# We include custom backends here. I believe these do not conflict,
# so you can add whatever makes sense to possibly use.
#
# To **set** the backend, use the workflow-options.json file
# for the "backend" option.
#include required("backends/backends.conf")
include "backends/podman.conf"
include "backends/apptainer.conf"
include "backends/slurm-apptainer.conf"

system {
    # Option to allow Cromwell to delete intermediate output files once the workflow succeeds
    delete-workflow-files = true

    # Cromwell has a configurable cap on the number of workflows running at a time. 
    max-concurrent-workflows = 5000
}

docker {
    hash-lookup {
        # This must be disabled to use local dockerhub without errors
        enabled = false
    }
} 

akka {
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  # loglevel = INFO

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out). There is
  # minimal information logged using this mechanism until configured loggers
  # are setup (EnhancedSlf4j).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = INFO

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

}

# Database
# There are multiple database options for cromwell. The simplest is an in-memory
# database similar to sqlite called HyperSQL (hsqldb.org) that can be configured
# as completely in memory (default, hsqldb_mem.conf) or file-based (hsqldb_file.conf).
# 
# More in-depth database solutions are possible, both for performance and for
# persistence. MySQL and Postgres are the two options that are described in the
# cromwell documentation (https://cromwell.readthedocs.io/en/stable/Configuring/). 
# NOTE: using MySQL/Postgres requires using a database server, either on another
# system or as a service on the local machine. Docker/podman could be useful here.
#
# Instructions: Pick the configuration you are interested in and include the file
# as indicated below. Note that doing nothing will use the hsqldb_mem.conf which 
# works except it is very memory intensive for large workloads. 
include "db/hsqldb_file.conf"


include "../local.conf"


