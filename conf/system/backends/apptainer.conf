backend {
    providers {

        # The apptainer provider is a container-based provider
        apptainer {
            # The SharedFileSystem provider
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            config {  
                run-in-background = true
                # Attributes that will be consumed from task runtime section.
                runtime-attributes = """
                    String? docker = "ubuntu:latest"
                    String? docker_volumes
                    Boolean contain_all = true
                """
                
                # How to run a job that includes a "docker" runtime attribute.
                # Some notes
                # -C is contain-all, meaning no mounts. If we use this, we cannot
                # support symlinks as our primary localization option (cannot follow).
                #
                # TODO: Incorporate pull of container image in advance of job, will
                # this be ok to run under cromwell directly (not on cluster)
                submit-docker = """
                    apptainer exec \
                        ${true="-C" false="" contain_all} \
                        --bind ${cwd}:${docker_cwd} \
                        ${"--bind " + docker_volumes} \
                        docker://${docker} \
                        ${job_shell} \
                        ${docker_script}
                """

                # Submit string when there is no "docker" runtime attribute. Per
                # the docs, you can simply exclude the variable. 
                # We could also just assign it to submit-docker directly (if needed).
                #submit = "/usr/bin/env bash ${script}"
                #submit = submit-docker

                # File system configuration.
                filesystems {

                    # For SFS backends, the "local" configuration specifies how files are handled.
                    local {

                        # Try to soft-link (ln -s), then hard link (ln), and if both fail, then copy the files.
                        localization: [
                        "soft-link", "hard-link", "copy"
                        ]
                        # Since we are preferring soft links for input, we need to have docker
                        # support this. But do note, the source of the links needs to be mounted in
                        # the container! You can use the docker_volumes variable for this purpose as
                        # a default in workflow-options.json.
                        docker.allow-soft-links: true

                        # Call caching strategies
                        caching {
                            # When copying a cached result, what type of file duplication should occur.
                            # For more information check: https://cromwell.readthedocs.io/en/stable/backends/HPC/#shared-filesystem
                            duplication-strategy: [
                                "soft-link", "hard-link",  "copy"
                            ]
                        }

                        # Strategy to determine if a file has been used before.
                        # For extended explanation and alternative strategies check: https://cromwell.readthedocs.io/en/stable/Configuring/#call-caching
                        hashing-strategy: "md5"

                        # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
                        # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
                        check-sibling-md5: false
                    }
                }
            }

        }
    }
}