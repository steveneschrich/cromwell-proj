backend {
    providers {

        # The podman provider is a container-based provider. This definition 
        # forces the use of podman as the container manager. By default if no
        # docker variable is provided, an ubuntu image is used for
        # evaluation of the job.
        podman {
            # The SharedFileSystem provider
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifecycleActorFactory"

            # TODO: Apptainer provides a cgroup-based approach to resource limitation:
            # https://apptainer.org/docs/user/latest/cgroups.html. This can be integrated into 
            # a non-HPC backend to limit cpu, memory, etc.

            config {  

                # Optional limits on the number of concurrent jobs, which would be platform-specific
                #concurrent-job-limit = 5

                # If true submits scripts to the bash background using "&". Only usefull for dispatchers that do NOT submit
                # the job and then immediately return a scheduled job id.
                run-in-background = true


                # `temporary-directory` creates the temporary directory for commands.
                #
                # If this value is not set explicitly, the default value creates a unique temporary directory, equivalent to:
                # temporary-directory = "$(mktemp -d \"$PWD\"/tmp.XXXXXX)"
                #
                # The expression is run from the execution directory for the script. The expression must create the directory
                # if it does not exist, and then return the full path to the directory.
                #
                # To create and return a non-random temporary directory, use something like:
                # temporary-directory = "$(mkdir -p /tmp/mydir && echo /tmp/mydir)"

                # `script-epilogue` configures a shell command to run after the execution of every command block.
                #
                # If this value is not set explicitly, the default value is `sync`, equivalent to:
                # script-epilogue = "sync"
                #
                # To turn off the default `sync` behavior set this value to an empty string:
                # script-epilogue = ""

                # `glob-link-command` specifies command used to link glob outputs, by default using hard-links.
                # If filesystem doesn't allow hard-links (e.g., beeGFS), change to soft-links as follows:
                # glob-link-command = "ln -sL GLOB_PATTERN GLOB_DIRECTORY"
                
               
                # The list of possible runtime custom attributes
                runtime-attributes = """
                String? docker = "ubuntu:latest"  # Use a default container if none specified.
                String? docker_user
                String? docker_volumes
                """

                # Submit string when there is a "docker" runtime attribute.
                submit-docker = """
                podman run \
                --rm -i \
                ${"--user " + docker_user} \
                --entrypoint ${job_shell} \
                -v ${cwd}:${docker_cwd} \
                ${"-v " + docker_volumes} \
                ${docker} ${script}
                """

                # Submit string when there is no "docker" runtime attribute. Here,
                # we are not going to try and make it work; only use podman
                #submit = "/usr/bin/env bash ${script}"
                submit = submit-docker

                # Root directory where Cromwell writes job results.  This directory must be
                # visible and writeable by the Cromwell process as well as the jobs that Cromwell
                # launches.
                root = "cromwell-executions"

                # Root directory where Cromwell writes job results in the container. This value
                # can be used to specify where the execution folder is mounted in the container.
                # it is used for the construction of the docker_cwd string in the submit-docker
                # value above.
                dockerRoot = "/cromwell-executions"

                # File system configuration.
                filesystems {

                    # For SFS backends, the "local" configuration specifies how files are handled.
                    local {

                        # Try to hard link (ln), then soft-link (ln -s), and if both fail, then copy the files.
                        localization: [
                        "hard-link", "soft-link", "copy"
                        ]

                        # Call caching strategies
                        caching {
                            # When copying a cached result, what type of file duplication should occur.
                            # For more information check: https://cromwell.readthedocs.io/en/stable/backends/HPC/#shared-filesystem
                            duplication-strategy: [
                                "hard-link", "soft-link", "copy"
                            ]
                        }

                        # Strategy to determine if a file has been used before.
                        # For extended explanation and alternative strategies check: https://cromwell.readthedocs.io/en/stable/Configuring/#call-caching
                        hashing-strategy: "md5"

                        # When true, will check if a sibling file with the same name and the .md5 extension exists, and if it does, use the content of this file as a hash.
                        # If false or the md5 does not exist, will proceed with the above-defined hashing strategy.
                        check-sibling-md5: false
                    }
                }
            }

            # The defaults for runtime attributes if not provided.
            default-runtime-attributes {
                failOnStderr: false
                continueOnReturnCode: 0
            }
         
            
        }
    }
}       
    