backend {
    providers {
        # Per the standard (https://cromwell.readthedocs.io/en/stable/RuntimeAtt
ributes/):
        # cpu
        # memory
        # docker
        # For cluster config, we adopt the standards of biowdl where possible.
        # time_minutes
        slurm-apptainer {
            actor-factory = "cromwell.backend.impl.sfs.config.ConfigBackendLifec
ycleActorFactory"                                                               
                      
            config {
                # NOTE: Although tasks will set the 'memory' attribute (as a str
ing with a size), this
                # appears to be converted into memory_mb and memory_gb (float) b
y this point. So we ignore
                # the memory and use memory_gb as the parameter. This is then tr
uncated to integer with the
                # ceil() function since that's what slurm needs.
                #
                # docker_shell: This variable allows you to specify the shell to
 use within the docker container. It
                # may vary from container to container which makes it relatively
 incompatible with the overall backend
                # job_shell. 
                runtime-attributes = """
                    Int time_minutes = 600
                    Int cpu = 1
                    Float? memory_gb = 2
                    String? docker = "ubuntu:latest"
                    String? docker_volumes
                    String? docker_shell="/bin/bash"
                """

                submit = """
			# This preamble is from https://cromwell.readthedocs.io/
en/stable/backends/HPC/
			# It allows us to pull the docker image once and re-use 
it in subsequent calls.
			# This does not exactly work, particularly in the case o
f using ':latest' tags, 
			# but presumably if one clears out the cache this would 
work.
                    	set -euo pipefail
        		CACHE_DIR=$HOME/.apptainer/cache/sif
        		mkdir -p $CACHE_DIR
        		LOCK_FILE=$CACHE_DIR/apptainer_pull_flock
        		DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docke
r})
        		IMAGE=$CACHE_DIR/$DOCKER_NAME.sif
        		(
          			flock --verbose --exclusive --timeout 900 9 || e
xit 1
          			if [ ! -e "$IMAGE" ]; then
            				apptainer build $IMAGE docker://${docker
}
          			fi
        		) 9>$LOCK_FILE

                    sbatch \
                        -J ${job_name} \
                        -D ${cwd} \
                        -o ${out} \
                        -e ${err} \
                        -t ${time_minutes} \
                        -c ${cpu} \
                        ${"--mem=" + ceil(memory_gb) + "G"} \
                        --wrap "apptainer exec --bind ${cwd}:${cwd} ${"--bind" +
 docker_volumes} $IMAGE ${docker_shell} ${script}"
                """

                submit-docker = """
			# This preamble is from https://cromwell.readthedocs.io/
en/stable/backends/HPC/
			# It allows us to pull the docker image once and re-use 
it in subsequent calls.
			# This does not exactly work, particularly in the case o
f using ':latest' tags, 
			# but presumably if one clears out the cache this would 
work.
                    	set -euo pipefail
        		CACHE_DIR=$HOME/.apptainer/cache/sif
        		mkdir -p $CACHE_DIR
        		LOCK_FILE=$CACHE_DIR/apptainer_pull_flock
        		DOCKER_NAME=$(sed -e 's/[^A-Za-z0-9._-]/_/g' <<< ${docke
r})
        		IMAGE=$CACHE_DIR/$DOCKER_NAME.sif
        		(
          			flock --verbose --exclusive --timeout 900 9 || e
xit 1
          			if [ ! -e "$IMAGE" ]; then
            				apptainer build $IMAGE docker://${docker
}
          			fi
        		) 9>$LOCK_FILE

                    # Submit the script to SLURM
                    sbatch \
                        -J ${job_name} \
                        -D ${cwd} \
                        -o ${cwd}/execution/stdout \
                        -e ${cwd}/execution/stderr \
                        -t ${time_minutes} \
                        -c ${cpu} \
                        ${"--mem=" + ceil(memory_gb) + "G"} \
                        --wrap "apptainer exec --bind ${cwd}:${docker_cwd} ${"--
bind " + docker_volumes} $IMAGE ${docker_shell} ${docker_script}"
                """

                kill = "scancel ${job_id}"
                kill-docker = "scancel ${job_id}"
                check-alive = "squeue -j ${job_id}"
                job-id-regex = "Submitted batch job (\\d+).*"
                concurrent-job-limit = 25


	        # Filesystem configuration
	        # Note: primary thing is to use symlinks instead of hard links. 
		# Since apptainer (which is this engine) mounts /share, then sym
links
		# are appropriate.
	        filesystems {
			local {
				# localization via soft links in containers
				# from https://cromwell.readthedocs.io/en/stable
/backends/HPC/
				localization = ["soft-link","copy"]
				docker.allow-soft-links: true
				
			}
		}
            }
        }
    }
}