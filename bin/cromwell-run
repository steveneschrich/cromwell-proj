#!/bin/bash
#
#
# Default values
#
# This script only executes the 'cromwell run' command with all options
# turned on.
DEBUG=1

# Note that we use "$@" to let each command-line parameter expand to a
# separate word. The quotes around "$@" are essential!
# We need TEMP as the 'eval set --' would nuke the return value of getopt.
TEMP=$(getopt -o 'dhc:' --long 'debug,config:,help' -n 'cromwell-run' -- "$@")
HELP="\nCromwell WDL script runner\ncromwell-run --config=config_file workflow.wdl\n"

if [ $? -ne 0 ]; then
        echo -e $HELP
        echo 'Terminating...' >&2
        exit 1
fi

# Note the quotes around "$TEMP": they are essential!
eval set -- "$TEMP"
unset TEMP

while true; do
        case "$1" in
                'd'|'--debug')
                        echo "DEBUG enabled"
                        DEBUG=1
                        shift
                        continue
                ;;
                '-c'|'--config')
                        CONFIG_FILE=$2
                        echo 'Using config file:' $CONFIG_FILE
                        shift 2
                        continue
                ;;
                '-h'|'--help')
                        echo -e $HELP
                        exit 1
                ;;
                '--')
                        shift
                        break
                ;;
                *)
                        echo 'Internal error!' >&2
                        exit 1
                ;;
        esac
done

if [ $# == 0 ]; then
    echo "ERROR: no WDL script provided"
    echo -e $HELP
    exit 1
fi


if [ ! -f ".cromwell-proj-root" ]; then
    echo "Not in cromwell project root, not continuing"
    exit 1
fi
JAVA=$(which java)
if [ -z "$JAVA" ]; then
    echo "Cannot find a usable java, please install."
    exit 1
fi

CROMWELL=$(ls lib/cromwell-*.jar | tail -1)
if [ -z "$CROMWELL" ]; then
    echo "cromwell jar file not installed in lib, run bin/cromwell-update"
    exit 1
fi
if [ $DEBUG == 1 ]; then
    echo "Using cromwell $CROMWELL"
fi

# Generate json includes from yml input
(cd conf && make)

# Here we assume only yml files
if [ ! -z "$CONFIG_FILE" ]; then
    WF=$(basename $CONFIG_FILE .yml)
    echo "Using workflow inputs $CONFIG_FILE (cache file is conf/cache/$WF.json)."
else
    if [ $DEBUG == 1 ]; then
        echo "Inferring config file for running workflow."
    fi
    WF=$(basename $1 .wdl)
    echo "Using workflow inputs conf/$WF.yml."
fi

WFJSON=conf/cache/$WF.json
if [ -s ${WFJSON} ]; then
    
    INPUTS_JSON="--inputs ${WFJSON}"
else
    echo "WARNING: workflow inputs not found, not using inputs. This is probably not what you want."
    INPUTS_JSON=""
fi


WFOPTS="conf/cache/workflow-options.json"
if [ -s ${WFOPTS} ]; then
    echo "Using workflow options file ${WFOPTS}."
    WORKFLOW_OPTIONS="--options ${WFOPTS}"
else
    WORKFLOW_OPTIONS=""
fi


# Now we can execute cromwell with all default options included for configuration.
#
# LOG_LEVEL: TRACE, DEBUG, INFO, WARN, ERROR, or OFF. (default is INFO).
# LOG_MODE: pretty, standard. (default is pretty for cromwell run, standard for cromwell server).
#
# Some notes on setting this log level. If this is set, it seems to override almost anything else
# that can be set (cromwell.conf, etc). 
# I was not able to determine how to disable hsqldb logging.
CMD="${JAVA} \
	-DLOG_LEVEL=INFO -DLOG_MODE=standard \
	-Dconfig.file=conf/system/cromwell.conf \
    -Dhsqldb.reconfig_logging=false \
    -Dhsqldb.applog=0 -Dhsqldb.sqlog=0 \
	-jar ${CROMWELL} \
	run \
    $INPUTS_JSON \
  	$WORKFLOW_OPTIONS \
	$@"

echo $CMD
$CMD
